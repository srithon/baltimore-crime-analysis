#+title: Baltimore Crime Analysis

The project focuses on analyzing Baltimore crime data to identify major factors contributing to crime rates and their geographic distribution.
The goal is to gain insights into the underlying causes of crime in order to address them effectively and reduce crime rates.

* Introduction
The project aims to understand the reasons behind the high crime rates in Baltimore, one of the most populous and dangerous cities in Maryland.
By analyzing existing crime data and exploring various factors that may influence crime, the project seeks to draw correlations and provide valuable insights that can help in reducing crime in the future.

* Project Objectives
- Analyze Baltimore crime data to identify major factors contributing to crime rates.
- Investigate the relationship between crime and geographic features such as population density, median income, proximity to police stations, bars, liquor stores, and vacant buildings.
- Provide actionable insights to help law enforcement agencies allocate resources effectively and make informed decisions to combat crime.

* Datasets
The project uses the Baltimore Crime Data dataset, published by the city of Baltimore itself.
The dataset contains information about various crimes, including their locations and crime codes.
Additionally, other datasets such as population density, median household income, and location data for police stations, liquor stores, bars, and vacant buildings are utilized to explore potential correlations with crime.
* Methodology
The project follows the following steps:

1. Data Collection:
   - Retrieve Baltimore Community Statistical Areas and their
     boundaries.
   - Download and preprocess the Baltimore Crime Data.
   - Gather additional datasets related to population density, median
     income, police stations, liquor stores, bars, and vacant buildings.
2. Exploratory Analysis & Data Visualization:
   - Conduct exploratory analysis on the crime data.
   - Visualize crime patterns, median income distribution, population
     density, and other relevant factors.
   - Identify regions with the highest crime rates and low median
     income.
3. Feature Engineering:
   - Extract relevant features from the datasets, including crime codes,
     proximity to police stations, bars, liquor stores, and vacant
     buildings.
   - Perform data transformations, normalization, and filtering as
     needed.
4. Correlation Analysis:
   - Analyze the correlation between different factors and crime rates.
   - Determine statistically significant relationships and their impact
     on crime.
5. Crime Hotspot Identification:
   - Utilize K-Means clustering to identify crime hotspots based on
     geographic features.
   - Evaluate clustering results and visualize crime clusters on a map.
6. Conclusion:
   - Summarize the findings and insights obtained from the analysis.
   - Provide recommendations for law enforcement agencies and
     policymakers based on the results.

* Requirements
To run the project code, you will need the following dependencies:
- Python 3.7 or above
- Jupyter Notebook or any Python IDE
- Libraries (these were simply extracted from the source):
  - pandas
  - geopandas
  - shapely
  - beautifulsoup
  - requests
  - requests_futures
  - matplotlib
  - plotly
  - scikit-learn
  - statsmodels

* Getting Started
1. Clone the project repository from GitHub.
2. Install the required dependencies.
3. Open the Jupyter Notebook or your preferred Python IDE.
4. Obtain a Google Places API token and save it under the ~GOOGLE_API_KEY~ environment variable
5. Run the project code cells in sequential order to reproduce the analysis and obtain the results.
6. Refer to the comments within the code for detailed explanations and instructions.

* License
The project code and analysis are provided under the
[[https://opensource.org/licenses/MIT][MIT License]]. You are free to
use, modify, and distribute the code for academic, personal, or
commercial purposes.

* Acknowledgments
- Baltimore City for providing the Baltimore Crime Data and other
  relevant datasets.
- Open Baltimore for making the datasets publicly available.

* Implementation Details
With the exception of the final export, I completed this entire project using [[https://orgmode.org/][Org Mode]] with the [[https://github.com/emacs-jupyter/jupyter][emacs-jupyter]] package.
Although there were several hitches with using Emacs, such as its slow performance with large files, as well as several setup-related bugs that certainly wouldn't happen in more popular editors, I really enjoyed the challenge of adapting my workflow and customizing my editor to better work on the project.
The customization I was most proud of is what produced the file: [[baltimore-crime-analysis_clean.org]].
The reason the file contains the ~_clean~ suffix is because I had it generated from my /actual/ Org notebook file, which contained many things that I did not want to be version-control tracked, such as ~RESULTS~ corresponding to code blocks, ~LOGBOOK~ entries keeping track of how much time I spend in different sections, as well as personal note-taking headlines that I had interspersed throughout my document.
I created an Emacs-Lisp function, ~org-babel-clean-export~, which would remove all of the things that I didn't want to be version-controlled from my file and write it to the file specified by the buffer-level ~CLEAN-EXPORT-FILENAME~ property.
I also created a minor mode, ~org-babel-clean-autoexport-mode~, which would enable an on-save hook for automatically exporting my file every time I saved the file, but this proved to make things too slow, and so I succumbed to exporting only prior to git commits.

You may also notice that about half of my progress was under one commit; regrettably, this was because I fell into my old habits and stopped committing to version control when I became stressed out by the approaching deadline.
At the point where I stopped making commits, I was constantly adding and deleting functionality when I realized that different things wouldn't work out, and I lost the motivation to put all of these into version control.
Another factor was my relative discomfort using ~magit~ in Emacs, since as a long-time Vim user I am far more accustomed to ~vim-fugitive~.
Although it's undeniable that ~magit~ is more powerful, when using the ~evil-collection~ keybindings which provide a Vim-like experience for different packages, ~magit~ feels a little bit clunky.
In the future, I may experiment with the stock Emacs bindings for ~magit~, which would likely feel more natural.
